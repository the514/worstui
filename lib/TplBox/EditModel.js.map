{"version":3,"sources":["../../src/TplBox/EditModel.js"],"names":["FormItem","Item","EditModel","props","state","model","modelName","newKey","key","data","visible","formItems","dataValue","dataTpl","modelId","dataSource","id","updateList","modelNameArr","projectUrl","url","each","columns","i","v","jsonRequestType","push","initialValue","undefined","isLocal","setState","nextProps","getFieldDecorator","form","formItemLayout","labelCol","span","wrapperCol","formItemName","index","val","editHidden","rulesObj","initObj","dataType","type","required","message","rules","columnsKey","columnsValue","regExp","textIndex","search","slice","valuePropName","getValueFromEvent","normFile","title","height","overflow","top","onCancel","onCreate","create"],"mappings":"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","file":"EditModel.js","sourcesContent":["import React, { Component } from 'react';\nimport GetColumnTpl from './GetColumnTpl';\nimport Config from '../Modules/Config';\n// import GetColumnConfig from './GetColumnConfig'; // 字段配置\nimport { Modal, Form } from 'antd';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nconst FormItem = Form.Item;\n\n// 添加新数据模态框\nclass EditModel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      model: [],\n      modelName: [],\n      newKey: props.key,\n      data: {},\n      visible: false,\n      formItems: []\n    };\n  }\n\n  componentDidMount(props) {\n    let dataValue = {};\n    let dataTpl = [];\n    let model = this.props.model;\n    let modelId = this.props.dataSource.id;\n    let updateList = this.props.updateList;\n    let modelName = \"\";\n    let modelNameArr = [];\n\n    // let columns = [];\n\n    // $.each(this.props.columns, function(index, val) {\n    //   $.each(this.props.columns[index], function(k, v) {\n\n    //     columns.push(GetColumnConfig(k, v, columns[index], this));\n\n    //   });\n    // });\n    // console.log(this.props.columns);\n\n    let projectUrl = this.props.url;\n\n    $.each(this.props.columns, function(i, v) {\n      if ( Config.jsonRequestType() === \"object\" ){\n        modelName = v.key; // 字段名为 key\n      }else{\n        modelName = model + \"[\"+ v.key +\"]\"; // 字段名修改为 model[key]\n      }\n      modelNameArr.push(modelName);        // 字段名添加到数组\n\n      dataValue[modelName] = \"\";\n      if (v.initialValue) {\n        dataValue[modelName] = v.initialValue;\n      }\n      dataValue[modelName] = GetColumnTpl(\n                            v.key,                  // 字段名称\n                            modelName,              // 模型名称\n                            dataValue[modelName],   // 默认值\n                            \"edit\",                 // 样式类型 [add, show, edit]\n                            projectUrl,             // 项目地址\n                            modelId,                // 数据id\n                            updateList,             // 更新list\n                            undefined,              // 分类解释数据字段名\n                            v.isLocal);             // 是否是本地解释数据\n      dataTpl.push(dataValue[modelName]);\n    });\n\n    this.setState({model: dataTpl});\n    this.setState({modelName: modelNameArr});\n\n  }\n\n  componentWillReceiveProps(nextProps) {\n\n    this.setState({ visible: nextProps.visible });\n\n    // let thisClass = this;\n    // let thisNextProps = nextProps;\n\n    // setTimeout((thisClass, thisNextProps) => {\n\n    const { getFieldDecorator } = nextProps.form;\n\n    const formItemLayout = {\n      labelCol: { span: 3 },\n      wrapperCol: { span: 18 },\n    };\n\n    var formItems = [];\n    var formItemName = this.state.modelName;\n    $.each(this.state.model, function(index, val) {\n      if(nextProps.columns[index].editHidden !== true){  // 是否在编辑表单显示\n\n        let rulesObj = {}; // 配置字段验证\n        let initObj = {}; // 配置字段默认设置\n\n        if(nextProps.columns[index].dataType!==undefined){\n\n          rulesObj =  {\n            type: nextProps.columns[index].dataType,\n            required: nextProps.columns[index].required?true:false, \n            message: nextProps.columns[index].message?nextProps.columns[index].message:\"\"\n          };\n\n          initObj.rules = [rulesObj];\n\n        }else{\n\n          rulesObj = {\n            required: nextProps.columns[index].required?true:false, \n            message: nextProps.columns[index].message?nextProps.columns[index].message:\"\" \n          };\n\n          initObj.rules = [rulesObj]; // 合并配置字段验证初始化设置\n\n        }\n\n        let columnsKey = nextProps.columns[index].key;  // 获取字段key\n        let columnsValue = \"\";                      // 获取字段val\n        if (nextProps.dataSource!==undefined && nextProps.dataSource!==null) {  \n          columnsValue = nextProps.dataSource[columnsKey];\n\n          let regExp = /(_){1}[^_]+$/;\n          let textIndex = columnsKey.search(regExp);\n          switch(textIndex>-1?columnsKey.slice(textIndex):0){\n            case \"_tag\":      // 标签类型字段需要重新用逗号分隔\n              columnsValue = columnsValue + \"\";\n              // console.log(columnsValue);\n              break;\n            case \"_datetime\": // 日期moment类型需要重新转换成日期字符串\n              if (columnsValue===null) {\n                columnsValue = \"\";\n              }else{\n                columnsValue = moment(columnsValue, 'YYYY-MM-DD HH:mm:ss');\n              }\n              break;\n            case \"_at\":       // 日期moment类型需要重新转换成日期字符串\n              if (columnsValue===null) {\n                columnsValue = \"\";\n              }else{\n                columnsValue = moment(columnsValue, 'YYYY-MM-DD HH:mm:ss');\n              }\n              break;\n            case \"_date\":     // 日期moment类型需要重新转换成日期字符串\n              if (columnsValue===null) {\n                columnsValue = \"\";\n              }else{\n                columnsValue = moment(columnsValue, 'YYYY-MM-DD');\n              }\n              break;\n            default:\n          }\n\n          initObj.initialValue = columnsValue;\n          // console.log(initObj);\n\n        }\n\n        if (nextProps.columns[index].valuePropName!==undefined) {\n          initObj.valuePropName = nextProps.columns[index].valuePropName;\n        }\n\n        if (nextProps.columns[index].getValueFromEvent!==undefined) {\n          initObj.getValueFromEvent = nextProps.normFile;\n        }\n\n        formItems.push(\n          <FormItem\n            {...formItemLayout}\n            label={nextProps.columns[index].title} \n            key={index}\n          >\n            {getFieldDecorator(formItemName[index], initObj)(\n              val\n            )}\n          </FormItem>);\n      }\n\n    });\n    // console.log(formItems);\n\n    this.setState({ formItems: formItems });\n    // }, 200);\n\n  }\n\n  render() {\n\n    return (\n\n      <Modal\n        className=\"editModel\"\n        key={this.state.newKey}\n        visible={this.props.visible}\n        title={this.props.title}\n        width={1200}\n        style={{height: \"90%\", overflow: \"hidden\", top: \"40px\"}}\n        okText=\"保存\"\n        onCancel={this.props.onCancel}\n        onOk={this.props.onCreate}\n      >\n        <Form>\n          { this.state.formItems }\n        </Form>\n      </Modal>\n    );\n  }\n}\n\nEditModel = Form.create({})(EditModel);\n\nexport default EditModel;"]}