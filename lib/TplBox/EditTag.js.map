{"version":3,"sources":["../../src/TplBox/EditTag.js"],"names":["EditTag","props","handleClose","removedTag","tags","state","filter","tag","console","log","setState","triggerChange","showInput","inputValue","inputVisible","input","focus","handleInputChange","e","target","value","handleInputConfirm","indexOf","changedValue","onChange","Object","assign","saveInputRef","key","valueText","valueArr","Array","isArray","split","nextProps","map","index","isLongTag","length","tagElem","slice","width"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEMA,O;;;AAEJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA,kHACXA,KADW;;AAAA,UAgDnBC,WAhDmB,GAgDL,UAACC,UAAD,EAAgB;AAC5B,UAAMC,OAAO,MAAKC,KAAL,CAAWD,IAAX,CAAgBE,MAAhB,CAAuB;AAAA,eAAOC,QAAQJ,UAAf;AAAA,OAAvB,CAAb;AACAK,cAAQC,GAAR,CAAYL,IAAZ;;AAEA,YAAKM,QAAL,CAAc,EAAEN,UAAF,EAAd;AACA,YAAKO,aAAL,CAAmBP,IAAnB;AACD,KAtDkB;;AAAA,UAwDnBQ,SAxDmB,GAwDP,YAAM;AAChB,YAAKF,QAAL,CAAc,EAAEG,YAAY,EAAd,EAAd;AACA,YAAKH,QAAL,CAAc,EAAEI,cAAc,IAAhB,EAAd,EAAsC;AAAA,eAAM,MAAKC,KAAL,CAAWC,KAAX,EAAN;AAAA,OAAtC;AACD,KA3DkB;;AAAA,UA6DnBC,iBA7DmB,GA6DC,UAACC,CAAD,EAAO;AACzB,YAAKR,QAAL,CAAc,EAAEG,YAAYK,EAAEC,MAAF,CAASC,KAAvB,EAAd;AACD,KA/DkB;;AAAA,UAiEnBC,kBAjEmB,GAiEE,YAAM;AACzB,UAAMhB,QAAQ,MAAKA,KAAnB;AACA,UAAMQ,aAAaR,MAAMQ,UAAzB;AACA,UAAIT,OAAOC,MAAMD,IAAjB;AACA,UAAIS,cAAcT,KAAKkB,OAAL,CAAaT,UAAb,MAA6B,CAAC,CAAhD,EAAmD;AACjDT,4CAAWA,IAAX,IAAiBS,UAAjB;AACD;AACDL,cAAQC,GAAR,CAAYL,IAAZ;;AAEA,YAAKM,QAAL,CAAc,EAAEN,UAAF,EAAd;AACA,YAAKO,aAAL,CAAmBP,IAAnB;;AAEA,YAAKM,QAAL,CAAc;AACZI,sBAAc,KADF;AAEZD,oBAAY;AAFA,OAAd;AAKD,KAlFkB;;AAAA,UAoFnBF,aApFmB,GAoFH,UAACY,YAAD,EAAkB;AAChC;AACA,UAAMC,WAAW,MAAKvB,KAAL,CAAWuB,QAA5B;AACA,UAAIA,QAAJ,EAAc;AACZA,iBAASC,OAAOC,MAAP,CAAcH,YAAd,CAAT;AACD;AACF,KA1FkB;;AAAA,UA4FnBI,YA5FmB,GA4FJ;AAAA,aAAS,MAAKZ,KAAL,GAAaA,KAAtB;AAAA,KA5FI;;AAGjB,QAAMK,QAAQnB,MAAMmB,KAAN,IAAe,EAA7B;AACA;AACA,UAAKf,KAAL,GAAa;AACXe,aAAOA,KADI;AAEXhB,YAAM,EAFK;AAGXU,oBAAc,KAHH;AAIXD,kBAAY,EAJD;AAKXe,WAAK;AALM,KAAb;AALiB;AAYlB;;;;sCAEiB3B,K,EAAM;;AAEtB,UAAI,KAAKI,KAAL,CAAWe,KAAf,EAAsB;AACpB,YAAIS,YAAY,KAAKxB,KAAL,CAAWe,KAA3B;AACA,YAAIU,WAAW,EAAf;;AAEA,YAAI,CAACC,MAAMC,OAAN,CAAcH,SAAd,CAAL,EAA+B;AAC7BC,qBAAWD,UAAUI,KAAV,CAAgB,GAAhB,CAAX;AACA,eAAKvB,QAAL,CAAc,EAAEN,MAAM0B,QAAR,EAAd;AACD,SAHD,MAGK;AACH,cAAID,cAAY,EAAhB,EAAoB;AAClB,iBAAKnB,QAAL,CAAc,EAAEN,MAAMyB,SAAR,EAAd;AACD;AACF;AACF;AACF;;;8CAEyBK,S,EAAW;AACnC,UAAIA,UAAUd,KAAV,KAAoB,EAAxB,EAA4B;AAC1B,YAAI,WAAWc,SAAf,EAA0B;AACxB,eAAKxB,QAAL,CAAc,EAAEU,OAAOc,UAAUd,KAAnB,EAAd;AACA,cAAIS,YAAYK,UAAUd,KAA1B;AACA,cAAIU,WAAW,EAAf;;AAEA,cAAI,CAACC,MAAMC,OAAN,CAAcH,SAAd,CAAL,EAA+B;AAC7BC,uBAAWD,UAAUI,KAAV,CAAgB,GAAhB,CAAX;AACA,iBAAKvB,QAAL,CAAc,EAAEN,MAAM0B,QAAR,EAAd;AACD,WAHD,MAGK;AACH,iBAAKpB,QAAL,CAAc,EAAEN,MAAMyB,SAAR,EAAd;AACD;AACF;AACF;AACF;;;6BAgDQ;AAAA;;AAAA,mBACoC,KAAKxB,KADzC;AAAA,UACCD,IADD,UACCA,IADD;AAAA,UACOU,YADP,UACOA,YADP;AAAA,UACqBD,UADrB,UACqBA,UADrB;;AAEP,aACE;AAAA;AAAA;AACGT,aAAK+B,GAAL,CAAS,UAAC5B,GAAD,EAAM6B,KAAN,EAAgB;AACxB,cAAMC,YAAY9B,IAAI+B,MAAJ,GAAa,EAA/B;AACA,cAAMC,UACJ;AAAA;AAAA,cAAK,KAAKhC,GAAV,EAAe,UAAU6B,QAAQ,CAAC,CAAlC,EAAqC,YAAY;AAAA,uBAAM,OAAKlC,WAAL,CAAiBK,GAAjB,CAAN;AAAA,eAAjD;AACG8B,wBAAe9B,IAAIiC,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAf,WAAuCjC;AAD1C,WADF;AAKA,iBAAO8B,YAAY;AAAA;AAAA,cAAS,OAAO9B,GAAhB;AAAsBgC;AAAtB,WAAZ,GAAuDA,OAA9D;AACD,SARA,CADH;AAUGzB,wBACC;AACE,eAAK,KAAKa,YADZ;AAEE,gBAAK,MAFP;AAGE,gBAAK,OAHP;AAIE,iBAAO,EAAEc,OAAO,EAAT,EAJT;AAKE,iBAAO5B,UALT;AAME,oBAAU,KAAKI,iBANjB;AAOE,kBAAQ,KAAKI,kBAPf;AAQE,wBAAc,KAAKA;AARrB,UAXJ;AAsBG,SAACP,YAAD,IAAiB;AAAA;AAAA,YAAQ,MAAK,OAAb,EAAqB,MAAK,QAA1B,EAAmC,SAAS,KAAKF,SAAjD;AAAA;AAAA;AAtBpB,OADF;AA0BD;;;;;;kBAGYZ,O","file":"EditTag.js","sourcesContent":["import React, { Component } from 'react';\nimport { Tag, Input, Tooltip, Button } from 'antd';\n\nclass EditTag extends Component {\n\n  constructor(props) {\n    super(props);\n\n    const value = props.value || \"\";\n    // console.log(value)\n    this.state = {\n      value: value,\n      tags: [],\n      inputVisible: false,\n      inputValue: \"\",\n      key: 0\n    };\n  }\n\n  componentDidMount(props){\n\n    if (this.state.value) {\n      let valueText = this.state.value;\n      let valueArr = [];\n\n      if (!Array.isArray(valueText)) {\n        valueArr = valueText.split(\",\");\n        this.setState({ tags: valueArr });\n      }else{\n        if (valueText!==\"\") {\n          this.setState({ tags: valueText });\n        }\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== \"\") {\n      if ('value' in nextProps) {\n        this.setState({ value: nextProps.value });\n        let valueText = nextProps.value;\n        let valueArr = [];\n\n        if (!Array.isArray(valueText)) {\n          valueArr = valueText.split(\",\");\n          this.setState({ tags: valueArr });\n        }else{\n          this.setState({ tags: valueText });\n        }\n      }\n    }\n  }\n\n  handleClose = (removedTag) => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    \n    this.setState({ tags });\n    this.triggerChange(tags);\n  }\n\n  showInput = () => {\n    this.setState({ inputValue: \"\" });\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  }\n\n  handleInputChange = (e) => {\n    this.setState({ inputValue: e.target.value });\n  }\n\n  handleInputConfirm = () => {\n    const state = this.state;\n    const inputValue = state.inputValue;\n    let tags = state.tags;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n    console.log(tags);\n\n    this.setState({ tags });\n    this.triggerChange(tags);\n\n    this.setState({\n      inputVisible: false,\n      inputValue: \"\"\n    });\n\n  }\n\n  triggerChange = (changedValue) => {\n    // Should provide an event to pass value to Form.\n    const onChange = this.props.onChange;\n    if (onChange) {\n      onChange(Object.assign(changedValue));\n    }\n  }\n\n  saveInputRef = input => this.input = input\n\n  render() {\n    const { tags, inputVisible, inputValue } = this.state;\n    return (\n      <div>\n        {tags.map((tag, index) => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable={index > -1} afterClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? <Tooltip title={tag}>{tagElem}</Tooltip> : tagElem;\n        })}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && <Button size=\"small\" type=\"dashed\" onClick={this.showInput}>+ 添加</Button>}\n      </div>\n    );\n  }\n}\n\nexport default EditTag;"]}